/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/clubs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a paginated list of clubs
         * @description Fetches a list of clubs with pagination and search capabilities. Clients can filter clubs based on various criteria such as type, category, and more.
         */
        get: operations["getClubsSearch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Image: {
            jpg: {
                /**
                 * Format: uri
                 * @description URL to the club's image in JPG format.
                 * @example https://cdn.myanimelist.net/images/clubs/16/222057.jpg
                 */
                image_url: string;
            };
        };
        Club: {
            /**
             * @description Unique identifier for the club.
             * @example 1
             */
            mal_id: number;
            /**
             * Format: uri
             * @description URL to the club's page on MyAnimeList.
             * @example https://myanimelist.net/clubs.php?cid=1
             */
            url: string;
            images: components["schemas"]["Image"];
            /**
             * @description Name of the club.
             * @example Cowboy Bebop
             */
            name: string;
            /**
             * @description Number of members in the club.
             * @example 1396
             */
            members: number;
            /**
             * @description Category of the club.
             * @enum {string}
             */
            category: "actors & artists" | "anime" | "characters" | "cities & neighborhoods" | "companies" | "conventions" | "games" | "japan" | "manga" | "music" | "others" | "schools";
            /**
             * Format: date-time
             * @description Creation date of the club.
             * @example 2007-03-29T00:00:00+00:00
             */
            created: string;
            /**
             * @description Access level of the club. Can be 'public', 'private', or 'secret'.
             * @enum {string}
             */
            access: "public" | "private" | "secret";
        };
        Pagination: {
            /**
             * @description The last visible page number.
             * @example 1
             */
            last_visible_page: number;
            /**
             * @description Indicates whether there is a next page.
             * @example true
             */
            has_next_page: boolean;
        };
        ErrorResponse: {
            error: {
                /**
                 * @description HTTP status code.
                 * @example 400
                 */
                code: number;
                /**
                 * @description Detailed error message.
                 * @example Invalid 'page' parameter. It must be a positive integer.
                 */
                message: string;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getClubsSearch: {
        parameters: {
            query?: {
                /** @description The page number to retrieve. Starts at 1. */
                page?: number;
                /** @description The number of items to retrieve per page. */
                limit?: number;
                /** @description Search query string to filter clubs by name. */
                q?: string;
                /** @description Filter clubs by access type. */
                type?: "public" | "private" | "secret";
                /** @description Filter clubs by category. */
                category?: "actors & artists" | "anime" | "characters" | "cities & neighborhoods" | "companies" | "conventions" | "games" | "japan" | "manga" | "music" | "others" | "schools";
                /** @description Sort the results by the specified field. */
                order_by?: "mal_id" | "name" | "members_count" | "created";
                /** @description Sort direction for the ordered field. */
                sort?: "desc" | "asc";
                /** @description Return entries starting with the given letter. */
                letter?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A paginated list of clubs */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Club"][];
                        pagination: components["schemas"]["Pagination"];
                    };
                };
            };
            /** @description Bad Request - Invalid query parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
